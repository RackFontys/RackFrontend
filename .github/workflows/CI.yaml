name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:

    runs-on: ubuntu-latest

    env:
      ISSUER_IP: ${{ secrets.ISSUER_IP }}
      AUDIENCE_IP: ${{ secrets.AUDIENCE_IP }}
      JWT_KEY: ${{ secrets.JWT_KEY }}
      RABBITMQ_USERNAME: ${{ secrets.RABBITMQ_USERNAME }}
      RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
      POSTGRES_USERNAME: ${{ secrets.POSTGRES_USERNAME }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      OCELLOT_USER_SERVICE: ${{ secrets.OCELLOT_USER_SERVICE }}
      OCELLOT_MESSAGE_SERVICE: ${{ secrets.OCELLOT_MESSAGE_SERVICE }}
      OCELLOT_DEFAULT_ADDRESS: ${{ secrets.OCELLOT_DEFAULT_ADDRESS }}

    steps:
      - name: Checkout Vue repository
        uses: actions/checkout@v4

      - name: Checkout backend repository
        uses: actions/checkout@v4
        with:
          repository: RackFontys/RackApi
          path: backend

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build and start backend services
        working-directory: backend
        run: | 
          chmod +x ./RackApi/createAppsettings.sh
          chmod +x ./RackApi.Chat/create_appsettings.sh
          chmod +x ./RackApi.User/create_appsettings.sh
          ./RackApi/createAppsettings.sh
          ./RackApi.Chat/create_appsettings.sh
          ./RackApi.User/create_appsettings.sh
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose up -d --build
        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1

      - name: Wait for backend to be ready
        run: |
          sudo apt-get install -y netcat
          while ! nc -z localhost 5283; do
            echo "Waiting for backend to be ready..."
            sleep 1
          done
          echo "Backend is ready"

      - name: Install frontend dependencies
        run: npm install

      - name: Build frontend project
        run: npm run build

      - name: Start frontend server
        run: npm run dev &
        env:
          VITE_PORT: 5173

      - name: Wait for frontend to be ready
        run: |
          sudo apt-get install -y netcat
          while ! nc -z localhost 5173; do
            echo "Waiting for frontend to be ready..."
            sleep 1
          done
          echo "Frontend is ready"

      - name: Install packages for Cypress
        run: npm install vue-jwt-decode

      - name: Install Cypress
        run: npm install cypress --save-dev

      - name: Run Cypress tests
        run: npm run cy:run
        env:
          CYPRESS_baseUrl: http://localhost:5173 # Replace with your actual base URL if different

      - name: Print API logs
        working-directory: backend
        run: docker-compose logs

      - name: Upload Cypress screenshots
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      - name: Tear down Docker Compose services
        working-directory: backend
        run: docker-compose down